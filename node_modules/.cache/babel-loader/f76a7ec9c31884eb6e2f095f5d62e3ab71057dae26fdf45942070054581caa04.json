{"ast":null,"code":"var _jsxFileName = \"/Users/pankajbhardwaj/Desktop/Projects/RnD/rntoreact/rntoreact/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [reactNativeCode, setReactNativeCode] = useState('');\n  const [reactJsCode, setReactJsCode] = useState('');\n  const [cssCode, setCssCode] = useState('');\n  const handleConvert = () => {\n    let convertedCode = reactNativeCode;\n    let convertedCss = '';\n\n    // Remove any existing React Native import statement\n    convertedCode = convertedCode.replace(/import {[^}]+} from 'react-native';/g, '');\n\n    // Ensure the import React statement is added once at the beginning\n    if (!convertedCode.includes(\"import React from 'react';\")) {\n      convertedCode = \"import React from 'react';\\n\" + convertedCode;\n    }\n\n    // Replace React Native components with their React.js equivalents\n    convertedCode = convertedCode.replace(/View/g, 'div').replace(/<Text/g, '<p').replace(/TouchableOpacity/g, 'button').replace(/StyleSheet.create\\({(.*?)}\\)/gs, '');\n\n    // Extract and convert the styles to CSS\n    const styleRegex = /const styles = StyleSheet.create\\(({[\\s\\S]*?})\\);/g;\n    const styleMatch = styleRegex.exec(reactNativeCode);\n    if (styleMatch) {\n      const stylesObject = eval(`(${styleMatch[1]})`);\n      for (const [key, value] of Object.entries(stylesObject)) {\n        const cssClassName = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n        convertedCss += `.${cssClassName} {\\n`;\n        for (const [cssKey, cssValue] of Object.entries(value)) {\n          const cssProperty = cssKey.replace(/([A-Z])/g, '-$1').toLowerCase();\n          convertedCss += `  ${cssProperty}: ${cssValue};\\n`;\n        }\n        convertedCss += '}\\n\\n';\n      }\n\n      // Replace style={styles.someClass} with className=\"someClass\"\n      convertedCode = convertedCode.replace(/style={styles\\.(\\w+)}/g, (match, p1) => {\n        const cssClassName = p1.replace(/([A-Z])/g, '-$1').toLowerCase();\n        return `className=\"${cssClassName}\"`;\n      });\n    }\n\n    // Remove the entire StyleSheet creation\n    convertedCode = convertedCode.replace(/const styles = ;/g, '');\n\n    // Update the state with the converted code and CSS\n    setReactJsCode(convertedCode);\n    setCssCode(convertedCss);\n  };\n  const handleCopy = text => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert('Code copied to clipboard!');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px',\n      maxWidth: '600px',\n      margin: 'auto'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"React Native to React.js Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"10\",\n      cols: \"50\",\n      value: reactNativeCode,\n      onChange: e => setReactNativeCode(e.target.value),\n      placeholder: \"Paste your React Native code here\",\n      style: {\n        width: '100%',\n        marginBottom: '10px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConvert,\n      style: {\n        padding: '10px 20px'\n      },\n      children: \"Convert to React.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Converted React.js Code:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        backgroundColor: '#f0f0f0',\n        padding: '10px',\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleCopy(reactJsCode),\n        style: {\n          position: 'relative',\n          right: '10px',\n          top: '10px',\n          padding: '5px 10px'\n          // marginBottom: '0px',\n        },\n        children: \"Copy React.js Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }, this), reactJsCode]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Generated CSS:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleCopy(cssCode),\n      style: {\n        padding: '5px 10px',\n        marginBottom: '10px'\n      },\n      children: \"Copy CSS Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      style: {\n        backgroundColor: '#f0f0f0',\n        padding: '10px',\n        whiteSpace: 'pre-wrap',\n        wordBreak: 'break-word'\n      },\n      children: cssCode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WLVAPp1kgI7pxu4MixkMwYvJ6i4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","reactNativeCode","setReactNativeCode","reactJsCode","setReactJsCode","cssCode","setCssCode","handleConvert","convertedCode","convertedCss","replace","includes","styleRegex","styleMatch","exec","stylesObject","eval","key","value","Object","entries","cssClassName","toLowerCase","cssKey","cssValue","cssProperty","match","p1","handleCopy","text","navigator","clipboard","writeText","then","alert","style","padding","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","cols","onChange","e","target","placeholder","width","marginBottom","onClick","backgroundColor","whiteSpace","wordBreak","position","right","top","_c","$RefreshReg$"],"sources":["/Users/pankajbhardwaj/Desktop/Projects/RnD/rntoreact/rntoreact/src/App.js"],"sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [reactNativeCode, setReactNativeCode] = useState('');\n  const [reactJsCode, setReactJsCode] = useState('');\n  const [cssCode, setCssCode] = useState('');\n\n  const handleConvert = () => {\n    let convertedCode = reactNativeCode;\n    let convertedCss = '';\n\n    // Remove any existing React Native import statement\n    convertedCode = convertedCode.replace(/import {[^}]+} from 'react-native';/g, '');\n\n    // Ensure the import React statement is added once at the beginning\n    if (!convertedCode.includes(\"import React from 'react';\")) {\n      convertedCode = \"import React from 'react';\\n\" + convertedCode;\n    }\n\n    // Replace React Native components with their React.js equivalents\n    convertedCode = convertedCode\n      .replace(/View/g, 'div')\n      .replace(/<Text/g, '<p')\n      .replace(/TouchableOpacity/g, 'button')\n      .replace(/StyleSheet.create\\({(.*?)}\\)/gs, '');\n\n    // Extract and convert the styles to CSS\n    const styleRegex = /const styles = StyleSheet.create\\(({[\\s\\S]*?})\\);/g;\n    const styleMatch = styleRegex.exec(reactNativeCode);\n\n    if (styleMatch) {\n      const stylesObject = eval(`(${styleMatch[1]})`);\n      for (const [key, value] of Object.entries(stylesObject)) {\n        const cssClassName = key.replace(/([A-Z])/g, '-$1').toLowerCase();\n        convertedCss += `.${cssClassName} {\\n`;\n        for (const [cssKey, cssValue] of Object.entries(value)) {\n          const cssProperty = cssKey.replace(/([A-Z])/g, '-$1').toLowerCase();\n          convertedCss += `  ${cssProperty}: ${cssValue};\\n`;\n        }\n        convertedCss += '}\\n\\n';\n      }\n\n      // Replace style={styles.someClass} with className=\"someClass\"\n      convertedCode = convertedCode.replace(/style={styles\\.(\\w+)}/g, (match, p1) => {\n        const cssClassName = p1.replace(/([A-Z])/g, '-$1').toLowerCase();\n        return `className=\"${cssClassName}\"`;\n      });\n    }\n\n    // Remove the entire StyleSheet creation\n    convertedCode = convertedCode.replace(/const styles = ;/g, '');\n\n    // Update the state with the converted code and CSS\n    setReactJsCode(convertedCode);\n    setCssCode(convertedCss);\n  };\n\n  const handleCopy = (text) => {\n    navigator.clipboard.writeText(text).then(() => {\n      alert('Code copied to clipboard!');\n    });\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '600px', margin: 'auto' }}>\n      <h2>React Native to React.js Converter</h2>\n      <textarea\n        rows=\"10\"\n        cols=\"50\"\n        value={reactNativeCode}\n        onChange={(e) => setReactNativeCode(e.target.value)}\n        placeholder=\"Paste your React Native code here\"\n        style={{ width: '100%', marginBottom: '10px' }}\n      />\n      <button onClick={handleConvert} style={{ padding: '10px 20px' }}>\n        Convert to React.js\n      </button>\n      <h3>Converted React.js Code:</h3>\n     \n      <pre\n        style={{\n          backgroundColor: '#f0f0f0',\n          padding: '10px',\n          whiteSpace: 'pre-wrap',\n          wordBreak: 'break-word',\n        }}\n      >\n         <button\n          onClick={() => handleCopy(reactJsCode)}\n          style={{\n            position: 'relative',\n            right: '10px',\n            top: '10px',\n            padding: '5px 10px',\n            // marginBottom: '0px',\n          }}\n        >\n          Copy React.js Code\n        </button>\n        {reactJsCode}\n      </pre>\n      <h3>Generated CSS:</h3>\n      <button onClick={() => handleCopy(cssCode)} style={{ padding: '5px 10px', marginBottom: '10px' }}>\n        Copy CSS Code\n      </button>\n      <pre\n        style={{\n          backgroundColor: '#f0f0f0',\n          padding: '10px',\n          whiteSpace: 'pre-wrap',\n          wordBreak: 'break-word',\n        }}\n      >\n        {cssCode}\n      </pre>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}